package PRINCIPAL;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import AL.AnalizadorLexico;
import AL.FileAux;
import AL.TablaSimbolos;
import AL.Token;


public class Compilador {
	private AnalizadorLexico al;
	private List<Character> buffer = new ArrayList<Character>();
    Map<Integer,String> tokens = new HashMap<>();

    public Compilador(){
        String as[] = {"AS0",
        		"AS0",
        		"AS0",
        		"AS1",
        		"AS1",
        		"ASE",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS2",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"ASE",
        		"ASE",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS3/ASb",
        		"AS1",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"AS3/ASb",
        		"ASE",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS1",
        		"AS1",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"AS5/ASb",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS1",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS1",
        		"AS6/ASb",
        		"AS1",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS1",
        		"ASE",
        		"ASE",
        		"AS1",
        		"AS1",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS1",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"AS6/ASb",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS1",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS7",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS7",
        		"ASE",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS7",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"ASE",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS8/ASb",
        		"AS7",
        		"AS8/ASb",
        		"AS9",
        		"AS8/ASb",
        		"AS8/ASb",
        		"ASE",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS0",
        		"ASE",
        		"AS1",
        		"AS1",
        		"ASE",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"ASa",
        		"AS0",
        		"ASE",
        		"AS1",
        		"AS1",
        		"AS4",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS1",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"ASE",
        		"AS0",
        		"AS0",
        		"AS0",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"ASE",
        		"AS1",
        		"AS1",
        		"ASE",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"AS1",
        		"ASa",
        		"AS1",
        		"AS1",
        		"ASE"};
        List<String> acciones_semanticas = new ArrayList<>(Arrays.asList(as));
        al = new AnalizadorLexico(acciones_semanticas);
        tokens.put(257,"identificador");
        tokens.put(258, "constante");
        tokens.put(61, "=");
        tokens.put(274, "=:");
        tokens.put(277, "=!");
        tokens.put(62, ">");
        tokens.put(275, ">=");
        tokens.put(60, "<");
        tokens.put(276, "<=");
        tokens.put(259, "cadena");
        tokens.put(43, "+");
        tokens.put(45, "-");
        tokens.put(42, "*");
        tokens.put(47, "/");
        tokens.put(40, "(");
        tokens.put(41, ")");
        tokens.put(123, "{");
        tokens.put(125, "}");
        tokens.put(44, ",");
        tokens.put(59, ";");
        tokens.put(58, ":");
        tokens.put(21,"palabra reservada");
    }

    public List<Character> crearBuffer(String direccion) { 
        String nombreArchivo = direccion;
        try {
            Scanner sc = new Scanner(new File(nombreArchivo));
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                for (int i = 0; i< line.length(); i++) {
                    buffer.add(line.charAt(i));
                }
                buffer.add('\n');
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return buffer;
    }

    /*void ejecutarLexico(){
        List<Token> t = lexico.leerCodigo(crearBuffer(""));
        System.out.println(t.toString());
    }*/

    void ejecutarCompilador(String s, String a){
        buffer = crearBuffer(s);
        Parser p = new Parser();
        p.setSintactico(buffer,al);
        p.yyparse();
        //List<String> estructura = p.getEstructura();
        List<String> errores_sintacticos = p.getErroresSintacticos();
        List<String> errores_lexicos = al.getErrores();
        System.out.println("Errores lexicos: " + errores_lexicos);
        System.out.println("Errores sintacticos: " + errores_sintacticos);
        GeneradorCodigo.generarCodigo();
        FileAux.wtiteProgram(a, GeneradorCodigo.codigo.toString());
        List<String> errores_semanticos = p.getErroresSemanticos();
        //List<Token> tokens = al.getTokens();
        List<String> polaca = p.getPolaca();
        //System.out.println("Tokens: " + tokens);
        System.out.println("Polaca: " + polaca);
        //System.out.println("Estructura: " + estructura);
        System.out.println("Errores semanticos: " + errores_semanticos);
        TablaSimbolos.imprimirTabla();
    }
}
